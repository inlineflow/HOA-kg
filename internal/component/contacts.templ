package component

import (
	"fmt"
	"hypermedia/internal/models"
	"strings"
)

func capitalize(s string) string {
	if len(s) == 0 {
		return s
	}

	return strings.ToUpper(string(s[0])) + strings.ToLower(s[1:])
}

templ ContactList(contacts []models.Contact) {
	for _, v := range contacts {
		<tr>
			<td>{ v.First }</td>
			<td>{ v.Last }</td>
			<td>{ v.Phone }</td>
			<td>{ v.Email }</td>
			<td>
				<a href={ fmt.Sprintf("/contacts/%s/edit", v.ID) }>Edit</a>
				<a href={ fmt.Sprintf("/contacts/%s", v.ID) }>View</a>
			</td>
		</tr>
	}
}

templ ContactSearch() {
	<div id="search-container">
		<label for="search" class="label">Search Term</label>
		<input id="search" type="search" name="q" value={ ctx.Value("search_term").(string) } class="input"/>
		<button hx-post="/partials/contacts" hx-target="#search-container" hx-include="search">Search</button>
	</div>
}

templ ContactsFormList(contacts []models.Contact) {
	@ContactSearch()
	<div class="max-w-256">
		<table class="table">
			<thead>
				<tr>
					<th>First </th>
					<th>Last </th>
					<th>Phone </th>
					<th>Email </th>
				</tr>
			</thead>
			<tbody>
				@ContactList(contacts)
			</tbody>
		</table>
		<p>
			<a href="/contacts/new">Add Contact</a>
		</p>
	</div>
}

templ GetContacts(contacts []models.Contact) {
	@BaseLayout("Contacts") {
		<div id="main">
			<!-- @ContactSearch() -->
			@ContactsFormList(contacts)
			<!-- <button hx-get="/partials/contacts" hx-target="#main"> -->
			<!-- 	Get the contacts -->
			<!-- </button> -->
		</div>
	}
}

templ formField(val, name, contactID, inputType, errors string) {
	<label for={ name } class="label">{ capitalize(name) }</label>
	<input
		name={ name }
		id={ name }
		type="text"
		placeholder={ capitalize(name) }
		value={ val }
		class="input"
		hx-get={ fmt.Sprintf("/contacts/%s/%s", contactID, name) }
		hx-target="next .alert"
	/>
	if (len(errors) > 0) {
		<span id={ fmt.Sprintf("error-msg-%s", name) } class="alert alert-error alert-outline py-1 mt-2">{ errors }</span>
	} else {
		<span id={ fmt.Sprintf("error-msg-%s", name) } class="hidden alert alert-error alert-outline py-1 mt-2"></span>
	}
}

templ NewContact(c models.Contact) {
	@BaseLayout("New contact") {
		<div>
			<form action="/contacts/new" method="post">
				<fieldset class="fieldset">
					<legend class="fieldset-legend">Contact Values</legend>
					<p>
						@formField(c.Email, "email", c.ID, "email", c.Errors["email"])
					</p>
					<p>
						@formField(c.First, "first_name", c.ID, "text", c.Errors["first"])
					</p>
					<p>
						@formField(c.Last, "last_name", c.ID, "text", c.Errors["last"])
					</p>
					<p>
						@formField(c.Phone, "phone", c.ID, "text", c.Errors["phone"])
					</p>
					<button class="btn btn-primary">Save</button>
					<p>
						<a href="/contacts/">Back</a>
					</p>
				</fieldset>
			</form>
		</div>
	}
}

templ ContactDetails(c models.Contact) {
	@BaseLayout(fmt.Sprintf("%s %s", c.First, c.Last)) {
		<div class="flex flex-col ">
			<h1>{ c.First } { c.Last }</h1>
			<div>
				<div>Phone: { c.Phone }</div>
				<div>Email: { c.Email }</div>
			</div>
			<p>
				<a href={ fmt.Sprintf("/contacts/%s/edit", c.ID) }>Edit</a>
				<a href="/contacts">Back</a>
			</p>
		</div>
	}
}

templ EditContact(c models.Contact) {
	@BaseLayout(fmt.Sprintf("Edit %s %s", c.First, c.Last)) {
		<form action={ fmt.Sprintf("/contacts/%s/edit", c.ID) } method="post">
			<fieldset>
				<legend class="fieldset-legend">Contact fields</legend>
				<p>
					<label for="email">Email</label>
					<input name="email" id="email" type="text" placeholder="Email" value={ c.Email }/>
					<span class="error">{ c.Errors["email"] }</span>
				</p>
				<p>
					<label for="first_name">First Name</label>
					<input name="first_name" id="first_name" type="text" placeholder="First Name" value={ c.First }/>
					<span class="error">{ c.Errors["first"] }</span>
				</p>
				<p>
					<label for="last_name">Last Name</label>
					<input name="last_name" id="last_name" type="text" placeholder="Last Name" value={ c.Last }/>
					<span class="error">{ c.Errors["last"] }</span>
				</p>
				<p>
					<label for="phone">Phone</label>
					<input name="phone" id="phone" type="text" placeholder="Phone" value={ c.Phone }/>
					<span class="error">{ c.Errors["phone"] }</span>
				</p>
				<button>Save</button>
			</fieldset>
		</form>
		<button
			hx-delete={ fmt.Sprintf("/contacts/%s", c.ID) }
			hx-target="body"
			hx-push-url="true"
			hx-confirm="Are you sure you want to delete this contact?"
		>Delete contact</button>
		<p>
			<a href="/contacts/">Back</a>
		</p>
	}
}
